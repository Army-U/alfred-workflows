#!/usr/bin/env ruby

require 'pathname'

Cache_dir = Pathname.new(ENV['alfred_workflow_cache'])
List_file = Cache_dir.join('list.json')

# Recheck films if list file does not exist or is older than a day or argument asks for it
if !List_file.exist? || (((Time.now - List_file.mtime) / (24 * 3600)).ceil > 1) || ARGV[0] == 'update_list'
  require 'json'
  require 'net/http'
  require 'nokogiri'
  require 'open3'
  require 'rss'
  require 'uri'

  Cache_dir.mkpath

  site_rss = URI.parse('https://www.shortoftheweek.com/feed')
  site_feed_links = RSS::Parser.parse(Net::HTTP.get(site_rss)).items.map(&:link).reject { |link| link.match('/news/') }

  # Grab link from items, remove "/news/" links, load info from links into array
  script_filter_items = site_feed_links.each_with_object([]) do |item, array|
    # Get details
    page = Nokogiri::HTML(URI(item).open, nil, Encoding::UTF_8.to_s) # Forced UTF-8
    url = page.at('.embed-wrapper').attr('data-src')
    title = page.at('h1.title').text
    image = URI.escape('https:' + page.at('.bar-hidden').at('img').attr('src'))
    synopsis = page.at('.description').text.strip
    details = page.at('.details')
    genre = details.at('span').text
    author = details.css('span')[1].text.strip.gsub(/\s+/, ' ') # `gsub` for carriage returns and extraneous spaces in the middle of strings
    duration = details.at('time') ? details.at('time').text : 'Unknown duration'

    # Set banner image as icon
    downloaded_image = Cache_dir.join(Pathname.new(image).basename)

    unless downloaded_image.exist? # Do not redownload or resize old images
      # Fork the processes to speedup task
      Process.detach(Process.fork {
        downloaded_image.write(URI(image).read)
        image_width = Open3.capture2('sips', '--getProperty', 'pixelWidth', downloaded_image.to_path).first.split("\s").last.to_i
        image_height = Open3.capture2('sips', '--getProperty', 'pixelHeight', downloaded_image.to_path).first.split("\s").last.to_i
        smaller_dimension = (image_width > image_height ? image_height : image_width).to_s
        system('sips', '--cropToHeightWidth', smaller_dimension, smaller_dimension, downloaded_image.to_path, out: File::NULL)
      })
    end

    array.push(
      title: title,
      subtitle: "#{genre} 𐄁 #{duration} 𐄁 #{author}",
      icon: { path: downloaded_image },
      mods: { alt: { subtitle: synopsis } },
      quicklookurl: item,
      arg: url
    )
  end

  List_file.write({ items: script_filter_items }.to_json)
end

# Output list
puts List_file.read
